name: Build and test

on:
  push:
  pull_request:

env: 
  CARGO_TERM_COLOR: always
  MOCK_NFTABLES: 1
  LETMEIN_DISABLE_SECCOMP: 1

jobs:
  server_and_client:
    name: Server and client
    strategy:
      matrix:
        toolchain:
          - 1.81.0 # MSRV
          - 1.85.0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup update ${{ matrix.toolchain }}
      - run: rustup default ${{ matrix.toolchain }}
      - run: rustup component add clippy
      - run: cargo build --verbose
      - run: sh ./tests/run-tests.sh

  client_only:
    name: Client only
    strategy:
      matrix:
        toolchain:
          - 1.84.0
        os:
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - run: rustup update ${{ matrix.toolchain }}
      - run: rustup default ${{ matrix.toolchain }}
      - run: rustup component add clippy
      - run: cargo build --verbose --package letmein
      - run: cargo clippy --package letmein -- --deny warnings
      - run: cargo clippy --tests --package letmein -- --deny warnings
      - run: cargo test --package letmein
      - run: cargo test --package letmein-conf
      - run: cargo test --package letmein-proto

  tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    container:
      image: rust:alpine
      options: --privileged --cap-add=NET_ADMIN --cap-add=SYS_ADMIN --security-opt seccomp=unconfined
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug checkout
        run: |
          pwd
          ls -la
          echo "Checking for debug-test.sh:"
          find . -name "debug-test.sh"
      
      - name: Install dependencies
        run: |
          apk add --no-cache \
            build-base \
            curl \
            git \
            nftables \
            iptables \
            sudo \
            libcap \
            strace \
            procps \
            shadow
      
      - name: Configure environment
        run: |
          # Installer Clippy
          rustup component add clippy
          
          # Configurer sudoers
          echo "ALL ALL=(ALL) NOPASSWD: /sbin/nft, /usr/bin/strace" >> /etc/sudoers
          
          # Préparation des répertoires
          mkdir -p /etc/nftables /run/letmeinfwd /run/letmeind /var/run/letmeind /var/run/letmeinfwd
          chmod 777 /run/letmeinfwd /run/letmeind /var/run/letmeind /var/run/letmeinfwd
          
          # Configuration de nftables de base
          echo '#!/usr/sbin/nft -f' > /etc/nftables/basic.conf
          echo 'flush ruleset' >> /etc/nftables/basic.conf
          echo 'table inet filter {' >> /etc/nftables/basic.conf
          echo '  chain input {' >> /etc/nftables/basic.conf
          echo '    type filter hook input priority 0; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '  chain forward {' >> /etc/nftables/basic.conf
          echo '    type filter hook forward priority 0; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '  chain output {' >> /etc/nftables/basic.conf
          echo '    type filter hook output priority 0; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '  chain LETMEIN-INPUT {' >> /etc/nftables/basic.conf
          echo '    type filter hook input priority 100; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '  chain LETMEIN-OUTPUT {' >> /etc/nftables/basic.conf
          echo '    type filter hook output priority 100; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '}' >> /etc/nftables/basic.conf
          chmod +x /etc/nftables/basic.conf
          
          # Initialisation de nftables
          nft -f /etc/nftables/basic.conf
      
      - name: Run tests with debugging
        run: |
          # Créer le répertoire pour les logs
          mkdir -p nft-logs
          
          # Ajouter les permissions d'exécution au script
          if [ -f "./debug-test.sh" ]; then
            chmod +x ./debug-test.sh
            # Exécuter les tests avec le script de débogage
            export LETMEIN_DISABLE_SECCOMP=1 RUST_BACKTRACE=0
            ./debug-test.sh --real --test "knock close"
          elif [ -f "$GITHUB_WORKSPACE/debug-test.sh" ]; then
            chmod +x "$GITHUB_WORKSPACE/debug-test.sh"
            # Exécuter les tests avec le chemin complet
            export LETMEIN_DISABLE_SECCOMP=1 RUST_BACKTRACE=0
            "$GITHUB_WORKSPACE/debug-test.sh" --real --test "knock close"
          else
            echo "ERROR: debug-test.sh not found! Searched in:" 
            echo "- $(pwd)/debug-test.sh"
            echo "- $GITHUB_WORKSPACE/debug-test.sh"
            find / -name "debug-test.sh" 2>/dev/null || echo "No debug-test.sh found on system!"
            exit 1
          fi
      
      - name: Display nftables logs on failure
        if: failure()  # Only run when tests fail
        run: |
          echo "==== NFTABLES DEBUG LOGS ===="
          echo "Displaying the initial, before-tests, and after-tests state logs:"
          
          echo "\n==== INITIAL STATE ===="
          cat nft-logs/nft-state-initial-*.log 2>/dev/null || echo "Initial state log not found"
          
          echo "\n==== STATE BEFORE TESTS ===="
          cat nft-logs/nft-state-before-tests-*.log 2>/dev/null || echo "Before-tests state log not found"
          
          echo "\n==== STATE AFTER TESTS ===="
          cat nft-logs/nft-state-after-tests-*.log 2>/dev/null || echo "After-tests state log not found"
          
          echo "\n==== COMPARING BEFORE/AFTER TESTS (diff) ===="
          diff nft-logs/nft-state-before-tests-*.log nft-logs/nft-state-after-tests-*.log 2>/dev/null || echo "Could not generate diff"
          
          echo "\n==== LISTING ALL GENERATED LOG FILES ===="
          ls -la nft-logs/ 2>/dev/null || echo "No log files found"
      
      # - name: Archive nftables logs (always)
      #   if: always()  # Run even if the previous step failed
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: nftables-logs
      #     path: nft-logs/
      #     retention-days: 1

# vim: ts=2 sw=2 expandtab
