name: Build and test

on:
  push:
  pull_request:

env: 
  CARGO_TERM_COLOR: always
  MOCK_NFTABLES: 1
  LETMEIN_DISABLE_SECCOMP: 1

jobs:
  server_and_client:
    name: Server and client
    strategy:
      matrix:
        toolchain:
          - 1.81 # MSRV
          - 1.85
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup update ${{ matrix.toolchain }}
      - run: rustup default ${{ matrix.toolchain }}
      - run: rustup component add clippy
      - run: cargo build --verbose
      - run: sh ./tests/run-tests.sh

  client_only:
    name: Client only
    strategy:
      matrix:
        toolchain:
          - 1.84.0
        os:
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - run: rustup update ${{ matrix.toolchain }}
      - run: rustup default ${{ matrix.toolchain }}
      - run: rustup component add clippy
      - run: cargo build --verbose --package letmein
      - run: cargo clippy --package letmein -- --deny warnings
      - run: cargo clippy --tests --package letmein -- --deny warnings
      - run: cargo test --package letmein
      - run: cargo test --package letmein-conf
      - run: cargo test --package letmein-proto

  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Add execute permissions to scripts
        run: chmod +x ./debug-test.sh ./tests/run-tests.sh ./build.sh

      - name: Build and run tests in Docker
        run: |
          # Construire l'image Docker
          docker build -t letmein-test -f Dockerfile.test .
          
          # Créer un répertoire pour les logs
          mkdir -p nft-logs
          
          # Exécuter les tests en affichant les règles nftables avant et après
          docker run --rm \
            --privileged \
            --cap-add=NET_ADMIN \
            --cap-add=SYS_ADMIN \
            --dns 8.8.8.8 \
            --dns 1.1.1.1 \
            --security-opt seccomp=unconfined \
            -e LETMEIN_DISABLE_SECCOMP=1 \
            -e RUST_BACKTRACE=0 \
            -v "$(pwd):/app" \
            --workdir /app \
            letmein-test /bin/sh -c '
              # Capture des règles nftables initiales
              mkdir -p nft-logs
              nft list ruleset > nft-logs/nft-state-initial-$(date +%Y%m%d-%H%M%S).log
              
              # Capture avant les tests
              nft list ruleset > nft-logs/nft-state-before-tests-$(date +%Y%m%d-%H%M%S).log
              
              # Lancer les tests
              echo "Lancement des tests..."
              # Exécuter directement les fonctions de test pour éviter les problèmes d'arguments
              cd ./tests
              echo "Lancement du test knock..."
              ./run-tests.sh knock
              KNOCK_RESULT=$?
              echo "Lancement du test close..."
              ./run-tests.sh close
              CLOSE_RESULT=$?
              cd ..
              # Si un des tests a échoué, on considère que tous les tests ont échoué
              if [ $KNOCK_RESULT -ne 0 ] || [ $CLOSE_RESULT -ne 0 ]; then
                TEST_RESULT=1
              else
                TEST_RESULT=0
              fi
              
              # Capture après les tests
              nft list ruleset > nft-logs/nft-state-after-tests-$(date +%Y%m%d-%H%M%S).log
              
              # Afficher un résumé
              echo "===== LOGS NFTABLES GÉNÉRÉS =====" 
              ls -la nft-logs/
              
              exit $TEST_RESULT
            '

      - name: Display nftables logs on failure
        if: failure()  # Only run when tests fail
        run: |
          echo "==== NFTABLES DEBUG LOGS ===="
          echo "Displaying the initial, before-tests, and after-tests state logs:"
          
          echo "\n==== INITIAL STATE ===="
          cat nft-logs/nft-state-initial-*.log 2>/dev/null || echo "Initial state log not found"
          
          echo "\n==== STATE BEFORE TESTS ===="
          cat nft-logs/nft-state-before-tests-*.log 2>/dev/null || echo "Before-tests state log not found"
          
          echo "\n==== STATE AFTER TESTS ===="
          cat nft-logs/nft-state-after-tests-*.log 2>/dev/null || echo "After-tests state log not found"
          
          echo "\n==== COMPARING BEFORE/AFTER TESTS (diff) ===="
          diff nft-logs/nft-state-before-tests-*.log nft-logs/nft-state-after-tests-*.log 2>/dev/null || echo "Could not generate diff"
          
          echo "\n==== LISTING ALL GENERATED LOG FILES ===="
          ls -la nft-logs/ 2>/dev/null || echo "No log files found"
          
  simple-tests:
    name: Simple Integration Tests (Real nftables mode)
    runs-on: ubuntu-latest
    container:
      image: rust:alpine
      options: --privileged --cap-add=NET_ADMIN --dns 8.8.8.8 --dns 1.1.1.1 --cap-add=SYS_ADMIN --security-opt seccomp=unconfined
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies and run tests
        run: |
          # Installer les dépendances nécessaires
          apk add --no-cache \
            build-base \
            curl \
            git \
            nftables \
            iptables \
            sudo \
            libcap \
            strace \
            procps \
            shadow
          
          # Préparer l'environnement
          mkdir -p /etc/nftables /run/letmeinfwd /run/letmeind /var/run/letmeind /var/run/letmeinfwd
          chmod 777 /run/letmeinfwd /run/letmeind /var/run/letmeind /var/run/letmeinfwd
          
          # Configuration DNS explicite pour résoudre les problèmes de résolution
          echo -e "nameserver 8.8.8.8\nnameserver 1.1.1.1" > /etc/resolv.conf
          
          # Configurer nftables de base
          echo '#!/usr/sbin/nft -f' > /etc/nftables/basic.conf
          echo 'flush ruleset' >> /etc/nftables/basic.conf
          echo 'table inet filter {' >> /etc/nftables/basic.conf
          echo '  chain input {' >> /etc/nftables/basic.conf
          echo '    type filter hook input priority 0; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '  chain forward {' >> /etc/nftables/basic.conf
          echo '    type filter hook forward priority 0; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '  chain output {' >> /etc/nftables/basic.conf
          echo '    type filter hook output priority 0; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '  chain LETMEIN-INPUT {' >> /etc/nftables/basic.conf
          echo '    type filter hook input priority 100; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '  chain LETMEIN-OUTPUT {' >> /etc/nftables/basic.conf
          echo '    type filter hook output priority 100; policy accept;' >> /etc/nftables/basic.conf
          echo '  }' >> /etc/nftables/basic.conf
          echo '}' >> /etc/nftables/basic.conf
          chmod +x /etc/nftables/basic.conf
          
          # Initialiser nftables
          nft -f /etc/nftables/basic.conf
          
          # Add clippy
          rustup component add clippy

          # Donner les permissions d'exécution aux scripts
          chmod +x ./debug-test.sh ./tests/run-tests.sh ./build.sh
          
          # Créer le répertoire pour les logs
          mkdir -p nft-logs
          
          # Configuration des flags pour les tests
          # Mode réel nftables (sans mock)
          export LETMEIN_DISABLE_SECCOMP=1 RUST_BACKTRACE=0 MOCK_NFTABLES=0
          
          # Capture des règles nftables initiales
          nft list ruleset > nft-logs/nft-state-initial-$(date +%Y%m%d-%H%M%S).log
          
          # Capture avant les tests
          nft list ruleset > nft-logs/nft-state-before-tests-$(date +%Y%m%d-%H%M%S).log
          
          # Lancer les tests directement
          echo "Lancement des tests..."
          # Exécuter directement les fonctions de test pour éviter les problèmes d'arguments
          cd ./tests
          echo "Lancement du test knock..."
          ./run-tests.sh knock
          KNOCK_RESULT=$?
          echo "Lancement du test close..."
          ./run-tests.sh close
          CLOSE_RESULT=$?
          cd ..
          # Si un des tests a échoué, on considère que tous les tests ont échoué
          if [ $KNOCK_RESULT -ne 0 ] || [ $CLOSE_RESULT -ne 0 ]; then
            TEST_RESULT=1
          else
            TEST_RESULT=0
          fi
          
          # Capture après les tests
          nft list ruleset > nft-logs/nft-state-after-tests-$(date +%Y%m%d-%H%M%S).log
          
          # Afficher un résumé
          echo "===== LOGS NFTABLES GÉNÉRÉS ====="
          ls -la nft-logs/
          
          exit $TEST_RESULT
      
      - name: Display nftables logs on failure
        if: failure()  # Only run when tests fail
        run: |
          echo "==== NFTABLES DEBUG LOGS ===="
          echo "Displaying the initial, before-tests, and after-tests state logs:"
          
          echo "\n==== INITIAL STATE ===="
          cat nft-logs/nft-state-initial-*.log 2>/dev/null || echo "Initial state log not found"
          
          echo "\n==== STATE BEFORE TESTS ===="
          cat nft-logs/nft-state-before-tests-*.log 2>/dev/null || echo "Before-tests state log not found"
          
          echo "\n==== STATE AFTER TESTS ===="
          cat nft-logs/nft-state-after-tests-*.log 2>/dev/null || echo "After-tests state log not found"
          
          echo "\n==== COMPARING BEFORE/AFTER TESTS (diff) ===="
          diff nft-logs/nft-state-before-tests-*.log nft-logs/nft-state-after-tests-*.log 2>/dev/null || echo "Could not generate diff"
          
          echo "\n==== LISTING ALL GENERATED LOG FILES ===="
          ls -la nft-logs/ 2>/dev/null || echo "No log files found"
      
      # - name: Archive nftables logs (always)
      #   if: always()  # Run even if the previous step failed
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: nftables-logs
      #     path: nft-logs/
      #     retention-days: 1

# vim: ts=2 sw=2 expandtab
